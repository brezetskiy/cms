/**
* {@object_class} ORM Base Peer generated {@date} 
* NEVER, YOU HEARD, NEVER DO NOT EDIT THIS FILE
*
* @package Pilot
* @subpackage {@module} 
* @version 1.0
* @author Eugen Golubenko <eugen@delta-x.ua>
* @copyright Copyright 2009, Delta-X ltd.
*/

class Base{@object_class}Peer extends ObjectPeer {
	
	/**
	 * @var TableMap
	 */
	protected static $TableMap = null;
	
	/**
	 * Builds {@object_class} TableMap
	 * @return TableMap
	 */
	public static function getTableMap() {
		if (self::$TableMap === null) {
			$TableMap = new TableMap();
			$TableMap->setClassName('{@object_class}');
			$TableMap->setTableName('{@table_name}');
			$TableMap->setDatabase('{@db_alias}');

<tmpl:simple_column>
{if $orm_type == 'int' || $orm_type == 'double'}
			$TableMap->addColumn(DecimalColumn::create('{$name}', {$min_value}, {$max_value}, {$precision}));
{elseif $orm_type == 'string'}
			$TableMap->addColumn(StringColumn::create('{$name}', {$max_length}));
{elseif $orm_type == 'datetime'}
			$TableMap->addColumn(DateTimeColumn::create('{$name}'));
{elseif $orm_type == 'enum'}
			$TableMap->addColumn(EnumColumn::create('{$name}', array({$possible_values})));
{elseif $orm_type == 'set'}
			$TableMap->addColumn(SetColumn::create('{$name}', array({$possible_values})));
{elseif $orm_type == 'boolean'}
			$TableMap->addColumn(BooleanColumn::create('{$name}'));
{/if}
</tmpl:simple_column>
<tmpl:one2many>
			$TableMap->addColumn(OneToManyRelation::create('{$name}', '{$foreign_object_class}', '{$foreign_table}'));
</tmpl:one2many>
<tmpl:many2many>
			$TableMap->addColumn(ManyToManyRelation::create('{$name}_id', '{$foreign_object_class}', '{$foreign_table}', '{$relation_table}', '{$local_field}', '{$foreign_field}'));
</tmpl:many2many>
			
			self::$TableMap = $TableMap;
		}
		return self::$TableMap;
	}
	
	/**
	 * Select collection of objects
	 * @return array   Returns array of {@object_class} objects
	 */
	public static function select(Criteria $c) {
		return parent::doSelect('{@object_class}Peer', $c);
	}
	
	/**
	 * Select one record according to Criteria
	 * @return {@object_class}|null  Returns null if object not found
	 */
	public static function selectOne(Criteria $c) {
		return parent::doSelectOne('{@object_class}Peer', $c);
	}
	
	/**
	 * Retrieves current object storing table
	 * @return string
	 */
	public static function tableName() {
		return '{@table_name}';
	}
	
	/**
	 * Retrieves current object mapping class
	 * @return string
	 */
	public static function objectClass() {
		return '{@object_class}';
	}
}