/**
* {@object_class} ORM Base generated {@date} 
* NEVER, YOU HEARD, NEVER DO NOT EDIT THIS FILE
*
* @package Pilot
* @subpackage {@module} 
* @version 1.0
* @author Eugen Golubenko <eugen@delta-x.ua>
* @copyright Copyright 2009, Delta-X ltd.
*/

abstract class Base{@object_class} extends ObjectMapping {

	protected $_PEER = '{@object_class}Peer';

	<tmpl:simple_column> 
	protected ${$name} = null;
	</tmpl:simple_column>

	<tmpl:one2many> 
	protected ${$name} = null;	
	</tmpl:one2many>
	
	<tmpl:many2many> 
	protected ${$name}_id = array();	
	</tmpl:many2many>
	
	/**
	 * Returns {@object_class} TableMap
	 * @return TableMap
	 */
	public function getTableMap() {
		return {@object_class}Peer::getTableMap();
	}
	{* Simple column getter/setter *}
	<tmpl:simple_column> 
	/**
	 * Get value of {$name} 
	 * @return {$orm_type} 
	 */
	public function {if $orm_type=='boolean'}is{else}get{/if}{$camelized_name}() {
		return $this->{$name}; // TODO add special cases for: datetime
	}
	
	/**
	 * Set value of {$name} 
	 * @param {$orm_type} ${$name} 
	 * @return {@object_class} 
	 */
	public function set{$camelized_name}(${$name}) {
		return $this->set('{$name}', ${$name});
	}
	</tmpl:simple_column>
	
	{* Fkey getter/setter *}
	<tmpl:one2many> 
	/**
	 * Get related {$foreign_object_class}, referenced by {$name} 
	 * @return {$foreign_object_class} (or NULL)
	 */
	public function get{$camelized_name_without_id}() {
		return $this->get('{$name_without_id}');
	} 
	
	/**
	 * Set related {$foreign_object_class}, referenced by {$name} 
	 * @param {$foreign_object_class}|int ${$name_without_id}  Related object or it's id
	 * @return {@object_class} 
	 */
	public function set{$camelized_name_without_id}(${$name_without_id}) {
		return $this->set('{$name}', ${$name_without_id});
	}
	
	/**
	 * Check if object has related {$foreign_object_class}, referenced by {$name} 
	 * @return bool
	 */
	public function has{$camelized_name_without_id}() {
		return ($this->get{$camelized_name_without_id}() !== null);
	}
	</tmpl:one2many>
	
	{* M:N fkey getter/setter *}
	<tmpl:many2many> 
	/**
	 * Get related {$foreign_object_class}s, referenced by {$name} 
	 * @return array Array of related {$foreign_object_class}s
	 */
	public function get{$camelized_name_without_id}() {
		return $this->get('{$name}_id');
	}
	
	/**
	 * Check if object has related {$foreign_object_class}s, referenced by {$name} 
	 * @return bool
	 */
	public function has{$camelized_name_without_id}() {
		return (count($this->get{$camelized_name_without_id}()) != 0);
	}
	
	/**
	 * Check if object is in {$name} list 
	 * @param {$foreign_object_class}|int ${$singular_name_without_id}  Related object or it's id
	 * @return bool
	 */
	public function isIn{$camelized_name_without_id}(${$singular_name_without_id}) {
		return $this->isIn('{$name}_id', ${$singular_name_without_id});
	}
	
	/**
	 * Add related {$foreign_object_class}, referenced by {$name} 
	 * @param {$foreign_object_class}|int ${$singular_name_without_id}  Related object or it's id
	 * @return {@object_class} 
	 */
	public function add{$camelized_singular_name_without_id}(${$singular_name_without_id}) {
		return $this->add('{$name}_id', ${$singular_name_without_id});
	}
	
	/**
	 * Remove related {$foreign_object_class} from related {$name} 
	 * @param {$foreign_object_class}|int ${$singular_name_without_id}  Related object or it's id
	 * @return {@object_class} 
	 */
	public function remove{$camelized_singular_name_without_id}(${$singular_name_without_id}) {
		return $this->remove('{$name}_id', ${$singular_name_without_id});
	}
	</tmpl:many2many> 
}